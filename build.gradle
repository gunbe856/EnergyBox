description = """EnergyBox"""

apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'application'

group = 'se.liu.rtslab.energybox'
version = '2.0'

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

mainClassName = "se.liu.rtslab.energybox.Launcher"
tasks.withType(Jar) {
    manifest {
        attributes("Main-Class": mainClassName)
    }
}
tasks.withType(JavaExec) {
    main = mainClassName
    classpath = sourceSets.main.runtimeClasspath
}


configurations {
    provided
    jnetpcap
}

sourceSets {
    main {
        resources {
            srcDir 'config'
        }
    }
}

repositories {
    mavenCentral()
    mavenLocal()
}

dependencies {
    compile 'org.apache.commons:commons-csv:1.1'
    compile 'org.apache.commons:commons-exec:1.3'
    testCompile 'commons-io:commons-io:2.4'
    testCompile 'junit:junit:4.12'
    provided files('lib/jnetpcap-1.4.r1425/jnetpcap.jar')
    jnetpcap 'org.apache.commons:commons-csv:1.1'
    jnetpcap 'org.apache.commons:commons-exec:1.3'
    jnetpcap files('lib/jnetpcap-1.4.r1425/jnetpcap.jar')
}

sourceSets.main.compileClasspath += [configurations.provided]

task copyTestResources(type: Copy) {
    from "${projectDir}/src/test/resources"
    into "${buildDir}/classes/test"
}
processTestResources.dependsOn copyTestResources

task EnergyBox(type: Jar) {
    description = 'Build EnergyBox.jar for OS X and Linux *without* bundled jnetpcap library.'
    group = 'build'
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
	copy{
		from 'config'
		into 'build/libs/configurationFiles'
	}
}

task EnergyBoxWindows(type: Jar) {
    description = 'Build EnergyBox.jar *with* bundle jnetpcap library (Windows compatible).'
    group = 'build'
    from sourceSets.main.allSource
    from { configurations.jnetpcap.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
	copy{
		from 'lib/jnetpcap-1.4.r1425/jnetpcap.dll'
		into 'build/libs'
	}
	copy{
		from 'config'
		into 'build/libs/configurationFiles'
	}
}

task runCli(type: JavaExec, dependsOn: EnergyBox) {
    description = 'Run EnergyBox CLI with predefined parameters in OS X and Linux.'
    group = 'application'
    // run with args --> run CLI
    args = ["--d=nexus_one_3g.config", "--n=3g_teliasonera.config", "--t=test1.pcap"]
    doFirst { println ">> Running CLI with params: " + args + "..."}
}

task runGui(type: JavaExec, dependsOn: EnergyBox) {
    description = 'Run EnergyBox GUI in OS X and Linux.'
    group = 'application'
    // run without args --> run GUI
    doFirst { println ">> Running GUI..." }
}

task runCliWindows(type: JavaExec, dependsOn: EnergyBoxWindows) {
    description = 'Run EnergyBox CLI with predefined parameters for Windows.'
    group = 'application'
    // run with args --> run CLI
    args = ["--d=nexus_one_3g.config", "--n=3g_teliasonera.config", "--t=test1.pcap"]
    doFirst { println ">> Running CLI with params: " + args + "..."}
}

task runGuiWindows(type: JavaExec, dependsOn: EnergyBoxWindows) {
    description = 'Run EnergyBox GUI in Windows.'
    group = 'application'
    // run without args --> run GUI
    doFirst { println ">> Running GUI..." }
}

task wrapper(type: Wrapper) {
    gradleVersion '2.3'
}

task createPom << {
    description = 'Create pom.xml for maven.'
    pom {
        project {
            groupId project.group
            artifactId project.name
            version project.version
        }
    }.writeTo("pom.xml")
}

buildscript {
    dependencies {
        try {
            assert (jfxrtDir != null)
        } catch (RuntimeException re) {
            ext.jfxrtDir = "."
        }

        ext.searchFile = {Map<String, Closure> places, List<String> searchPaths, String searchID ->
            File result = null;
            places.each { k, v ->
                if (result != null) return;
                project.logger.debug("Looking for $searchID in $k")
                def dir = v()
                if (dir == null) {
                    project.logger.debug("$k not set")
                } else {
                    project.logger.debug("$k is $dir")
                    searchPaths.each { s ->
                        if (result != null) return;
                        File f = new File(dir, s);
                        project.logger.debug("Trying $f.path")
                        if (f.exists() && f.file) {
                            project.logger.debug("found $searchID as $result")
                            result = f;
                        }
                    }
                }
            }
            if (!result?.file) {
                throw new GradleException("Could not find $searchID, please set one of ${places.keySet()}");
            } else {
                project.logger.info("$searchID: ${result}")
                return result
            }
        }
        ext.findJFXJar = {
            return searchFile([
                    'jfxrtDir in Gradle Properties': {jfxrtDir},
                    'JFXRT_HOME in System Environment': {System.env['JFXRT_HOME']},
                    'JAVA_HOME in System Environment': {System.env['JAVA_HOME']},
                    'java.home in JVM properties': {System.properties['java.home']}
            ],
                    ['jfxrt.jar', 'lib/jfxrt.jar', 'lib/ext/jfxrt.jar', 'jre/lib/jfxrt.jar', 'jre/lib/ext/jfxrt.jar'],
                    'JavaFX Runtime Jar')
        }

        ext.findAntJavaFXJar = {
            return searchFile([
                    'jfxrtDir in Gradle Properties': {jfxrtDir},
                    'JFXRT_HOME in System Environment': {System.env['JFXRT_HOME']},
                    'JAVA_HOME in System Environment': {System.env['JAVA_HOME']},
                    'java.home in JVM properties': {System.properties['java.home']}
            ],
                    ['ant-javafx.jar', 'lib/ant-javafx.jar', '../lib/ant-javafx.jar'],
                    'JavaFX Packager Tools')
        }

        classpath project.files(findAntJavaFXJar())
        classpath project.files(findJFXJar())
    }
}
